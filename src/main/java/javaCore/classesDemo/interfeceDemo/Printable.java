package javaCore.classesDemo.interfeceDemo;

/**
 * Создадим интерфейс, который приносит нам функциональность в наш класс например для
 * печати на консоль т.е. print и назовем его Printable. Hа практике очень распространены
 * интерфейсы, гораздо чаще их используют чем абстракт. классы, ввиду их невероятной
 * гибкости и то что мы можем реализовывать очень много интерфейсов для одного класса.
 * Следовательно, мы не ограничены как при наследовании.
 * Теперь после создания interface мы можем написать какие-либо константы они будут
 * публичные например String SOME_VALUE = "Example" здесь мы опускаем модификатор доступа
 * и ключевые слова static, final. Мы неограниченны в количестве методов.
 * Обращаем внимание на название наших интерфейсов, т.е. они не должны
 * представлять собой какой-то предмет, следовательно, они должны называться как будто
 * это какое-то действие. Если мы реализовали интерфейс в классе родителе – то все наследники
 * так же его унаследуют. Казалось бы что нам это дает у нас мог бы быть метод void print()
 * у нашего Computer и все, а дело в том что Printable может реализовать любой совершенно
 * класс необязательно который является Computer т.е. не наследуется от Computer.
 */
public interface Printable {
    String SOME_VALUE = "Example";

    void print();

}
