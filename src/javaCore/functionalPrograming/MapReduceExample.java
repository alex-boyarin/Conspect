package javaCore.functionalPrograming;

import java.util.stream.Stream;

/**
 * "map reduce" - это програмная модель которая позволяет нам преобразовывать входные данные
 * при необходимости для последующей ее обработки, и суть в том что мы можем это делать паралельно
 * т.е. распаралеливать вычисления для того чтобы ускорить обработку всего потока данных
 * Пример:
 * Если у нас есть 3 000 000 студентов, то чтобы найти максимальный возраст, мы разбиваем на 3 группы
 * [1 000 000] -> age -> max
 * [1 000 000] -> age -> max ->
 * [1 000 000] -> age -> max
 * Далее следует описание кода:
 * Мы создаем Stream и помещаем нескольких студентов, далее подготавливаем входные параметры
 * для этого вызываем метод map() чтобы извлеч данные о нашем студенте. Берем у нашего студента
 * возраст (StudentMap::getAge) после этого мы можем вызывать reduce()
 * У нас есть несколько вариантов реализации этого метода. В данном случае мы можем сказать
 * что нам необходим максимальный элемент наших возрастов (нас устраивает BinaryOperator<Integer>accumulator)
 * далее мы внутри reduce(вызываем Math::max). Далее метод reduce() нам возвращает Optional про него
 * поговорим в другом уроке. Далее мы вызываем ifPresent() это что-то вроде метода forEach() для
 * нашего Stream, но так как у нас одно значени на выходе мы будем использовать ifPresent(System.out::println)
 * <p>
 * Так же мы можем распаралелить наш поток для быстроты обработки данных,
 * сразу как только мы получаем на вход наших "3 000 000" студентов мы вызываем метод parallel()
 * если мы все таки имеем уже паралельную обработку и не хотим ей пользоваться то можем использовать
 * .sequential()-последовательный, для последовательного вычисления
 */
public class MapReduceExample {
    public static void main(String[] args) {
        Stream.of(new StudentMap(18, "ivan"),
                        new StudentMap(23, "petr"),
                        new StudentMap(34, "vasya"),
                        new StudentMap(45, "sveta"),
                        new StudentMap(20, "katya"),
                        new StudentMap(68, "den"),
                        new StudentMap(101, "ira"))
                .parallel()
                .sequential()
                .map(StudentMap::getAge)
                .reduce(Math::max)
                // .reduce(Integer::sum) можно сложить все возвраста
                .ifPresent(System.out::println);
    }
}
