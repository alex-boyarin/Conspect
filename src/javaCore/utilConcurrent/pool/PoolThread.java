package javaCore.utilConcurrent.pool;

import java.util.Optional;
import java.util.Queue;

public class PoolThread extends Thread {
    private final Queue<Runnable> tasks;//очередь задач

    public PoolThread(Queue<Runnable> tasks) {
        this.tasks = tasks;
        /*
Инициализ. во время создания нашего пула, но естественно есть потоки, например main,
который будет добавлять в эти task новые задачи по мере их возникновения. Когда поток из нашего пула
свободен, он может выполнить эту задачу и нам не придется создавать новый поток
         */
    }

    @Override
    public void run() {
        while (true) {
            Optional<Runnable> task = Optional.empty();
            synchronized (tasks) {
                if (!tasks.isEmpty()) {
                    task = Optional.of(tasks.remove());
                }
            }
            task.ifPresent(runnable -> runnable.run());
        }
    }
    /*
Создаем бесконечный цикл, и у нас будет задача которую будем выполня в случае если задача будет
находиться в нашей очереди. Поэтому создаем Optional<Runnable> task который будет Optional.empty()-пустой
-т.е. пока у нас нету никакой задачи. И далее мы должны захватить монитор наших task и проверить
есть ли в наших task какая-либо из доступных задач которую мы должны решить. Если !tasks.isEmpty()
тогда мы говорим  task = Optional.of(tasks.remove()) т.е. забираем задачу, и сразу выходим из синхр. блока
т.е. мы должны как можно меньше времени занимать монитор наших task, т.е. по сути это одна структура
и мы захватываем монитор всей очереди, потому-что мы знаем что в один и тот же момент времени только
один поток может забрать одну задачу, чтобы случайно два потока не выполняли одну и ту же задачу.
И как только мы вышли из нашего синхр. блока, мы теперь можем сделать следующее:
task.ifPresent(Runnable::run); если task существует, то просто вызываем метод run() у него.
И после выполнения мы снова находимся в нашем цикле while(true) он бесконечный, следовательно операция
повторяется снова. Таким образом мы можем создать множество таких потоков, которые по мере возможности
будут выполнять наши задачи.
     */
}
